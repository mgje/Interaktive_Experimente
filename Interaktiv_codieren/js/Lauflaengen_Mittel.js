// Generated by CoffeeScript 2.1.0
(function() {
  //DOM Help Functions
  var addcolumn, bfromcode, bt, bt2, bt3, bt4, clearAllChilds, createCodeBlock, createCodeRows, createRandomMatrix, dec, decodeBIT, decodeRLE, defineStyle, el, enc, encodeBIT, encodeRLE, evaluateInput, grid, handleronChange, makeclone, mincolumn, outCode, updateCell, updateMatrix, wout;

  wout = function(eid, output) {
    var e, t;
    e = clearAllChilds(eid);
    t = document.createTextNode(output);
    e.appendChild(t);
    return false;
  };

  clearAllChilds = function(id) {
    var e;
    e = document.getElementById(id);
    while (e.hasChildNodes()) {
      e.removeChild(e.lastChild);
    }
    return e;
  };

  // Create Grid
  createCodeBlock = function(k, n) {
    var i, l, ref, results;
    results = [];
    for (i = l = 0, ref = n; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
      results.push(`<div id="${k * grid.col + i}" class="smallBox cell">\n	<div class="innerBox null"></div>\n</div>`);
    }
    return results;
  };

  createCodeRows = function() {
    var j, l, ref, results;
    results = [];
    for (j = l = 0, ref = this.row - 1; 0 <= ref ? l <= ref : l >= ref; j = 0 <= ref ? ++l : --l) {
      results.push(`<div class="zeile">\n${createCodeBlock(j, this.col - 1).join("")} \n</div>`);
    }
    return results;
  };

  defineStyle = function() {
    this.element.style.width = `${this.col * this.size}px`;
    return this.element.style.height = `${this.row * this.size}px`;
  };

  updateCell = function(i, s) {
    var el, inp;
    el = document.getElementById(i);
    inp = el.getElementsByClassName("numberInput")[0];
    return inp.value = s;
  };

  createRandomMatrix = function() {
    var d, l, m, ref, ref1, x, y, z;
    for (y = l = 0, ref = this.row; 0 <= ref ? l < ref : l > ref; y = 0 <= ref ? ++l : --l) {
      for (x = m = 0, ref1 = this.col; 0 <= ref1 ? m < ref1 : m > ref1; x = 0 <= ref1 ? ++m : --m) {
        d = Math.random();
        z = Math.floor(2 * d);
        this.matrix[y * this.col + x] = z;
      }
    }
    wout("rowcol", `${this.col} x ${this.row} |         ${this.col} Spalten / ${this.row} Zeilen`);
    return false;
  };

  updateMatrix = function() {
    var e, id, l, ref, results, x, y;
    results = [];
    for (y = l = 0, ref = this.row; 0 <= ref ? l < ref : l > ref; y = 0 <= ref ? ++l : --l) {
      results.push((function() {
        var m, ref1, results1;
        results1 = [];
        for (x = m = 0, ref1 = this.col; 0 <= ref1 ? m < ref1 : m > ref1; x = 0 <= ref1 ? ++m : --m) {
          id = y * this.col + x;
          e = (document.getElementById(id)).getElementsByTagName("div");
          if (this.matrix[id] === 0) {
            e[0].className = "innerBox null";
          }
          if (this.matrix[id] === 1) {
            results1.push(e[0].className = "innerBox eins");
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  encodeRLE = function() {
    var farbe, l, len1, pixel, ref, z;
    this.code = [];
    this.code.push(this.col);
    farbe = 0;
    z = 0; // Begin with Black
    ref = this.matrix;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      pixel = ref[l];
      if (pixel === farbe) {
        z = z + 1;
      } else {
        this.code.push(z);
        z = 1;
        if (farbe === 0) {
          farbe = 1;
        } else {
          farbe = 0;
        }
      }
    }
    this.code.push(z);
    return this.code.join();
  };

  encodeBIT = function() {
    var l, len1, pixel, ref;
    this.code = [];
    this.code.push(this.col);
    ref = this.matrix;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      pixel = ref[l];
      this.code.push(pixel);
    }
    return this.code.join();
  };

  enc = function() {
    var el;
    el = document.getElementById("selectCode");
    if (el.value === "Bitmap Codierung") {
      return this.enBIT();
    } else {
      return this.enRLE();
    }
  };

  decodeRLE = function() {
    var c, col, farb, i, l, len1, m, ref, ref1;
    col = this.code.shift();
    if (col > this.maxcol) {
      alert(`Es können nicht ${col} Pixel pro Zeile dargestellt werden. Die maximale Anzahl Pixel beträgt ${this.maxcol} `);
    } else {
      this.col = col;
      this.matrix = [];
      farb = 0;
      ref = this.code;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        c = ref[l];
        for (i = m = 0, ref1 = c; 0 <= ref1 ? m < ref1 : m > ref1; i = 0 <= ref1 ? ++m : --m) {
          this.matrix.push(farb);
        }
        if (farb === 0) {
          farb = 1;
        } else {
          farb = 0;
        }
      }
      this.row = Math.floor(this.matrix.length / this.col);
      // Angefangene Zeile
      if (this.row !== this.matrix.length / this.col) {
        this.row += 1;
      }
    }
    this.code.unshift(col);
    return false;
  };

  decodeBIT = function() {
    var c, col, l, len1, ref;
    col = this.code.shift();
    if (col > this.maxcol) {
      alert(`Es können nicht ${col} Pixel pro Zeile dargestellt werden. Die maximale Anzahl Pixel beträgt ${this.maxcol} `);
    } else {
      this.col = col;
      this.matrix = [];
      ref = this.code;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        c = ref[l];
        if (c === 0 || c === 1) {
          this.matrix.push(c);
        }
      }
      this.row = Math.floor(this.matrix.length / this.col);
      // Angefangene Zeile
      if (this.row !== this.matrix.length / this.col) {
        this.row += 1;
      }
    }
    this.code.unshift(col);
    return false;
  };

  dec = function() {
    var el;
    el = document.getElementById("selectCode");
    if (el.value === "Bitmap Codierung") {
      return this.decBIT();
    } else {
      return this.decRLE();
    }
  };

  // Clone the Figure
  makeclone = function() {
    var b, col, len;
    len = this.code.length;
    col = this.code.shift();
    b = [].concat(this.code);
    if (len % 2 === 0) {
      b.push(0);
    }
    b = b.concat(this.code);
    this.code = b;
    this.code.unshift(col);
    this.buildFromCode();
    return false;
  };

  //Sub Column
  mincolumn = function() {
    var arr, l, m, ref, ref1, x, y;
    if (this.col > 2) {
      arr = [];
      arr.length = (this.col - 1) * this.row;
      for (y = l = 0, ref = this.row; 0 <= ref ? l < ref : l > ref; y = 0 <= ref ? ++l : --l) {
        for (x = m = 0, ref1 = this.col - 1; 0 <= ref1 ? m < ref1 : m > ref1; x = 0 <= ref1 ? ++m : --m) {
          arr[y * (this.col - 1) + x] = this.matrix[y * this.col + x];
        }
      }
      this.col = this.col - 1;
      this.matrix = arr;
      this.outCodeToForm();
      return this.buildFromCode();
    }
  };

  // Add Column
  addcolumn = function() {
    var arr, l, m, ref, ref1, x, y;
    if (this.col < this.maxcol) {
      arr = [];
      arr.length = (this.col + 1) * this.row;
      for (y = l = 0, ref = this.row; 0 <= ref ? l < ref : l > ref; y = 0 <= ref ? ++l : --l) {
        for (x = m = 0, ref1 = this.col; 0 <= ref1 ? m < ref1 : m > ref1; x = 0 <= ref1 ? ++m : --m) {
          arr[y * (this.col + 1) + x] = this.matrix[y * this.col + x];
        }
        arr[y * (this.col + 1) + this.col] = 0;
      }
      this.col = this.col + 1;
      this.matrix = arr;
      this.outCodeToForm();
      return this.buildFromCode();
    }
  };

  // Ausertung des Formularfeldes
  evaluateInput = function(form) {
    var input, l, len1, ref, z, zm;
    input = form.value;
    zm = [];
    ref = input.split(',');
    for (l = 0, len1 = ref.length; l < len1; l++) {
      z = ref[l];
      zm.push(parseInt(z));
    }
    this.code = zm;
    return this.buildFromCode();
  };

  bfromcode = function() {
    this.decode();
    clearAllChilds("code");
    this.element.innerHTML = grid.createGrid().join('');
    this.defgridborder();
    this.updateMat();
    wout("rowcol", `${this.col} x ${this.row} |         ${this.col} Spalten / ${this.row} Zeilen`);
    return false;
  };

  outCode = function() {
    var tmps;
    tmps = this.encode();
    (document.getElementById("rle_code")).value = tmps;
    return wout("rle_code", tmps);
  };

  //Event Handler
  handleronChange = function(e) {
    var el, id, st;
    el = e.target;
    st = el.className;
    id = parseInt(el.parentElement.id);
    if (st === "innerBox null") {
      el.className = "innerBox eins";
      grid.matrix[id] = 1;
    }
    if (st === "innerBox eins") {
      el.className = "innerBox null";
      grid.matrix[id] = 0;
    }
    return false;
  };

  grid = {
    row: 20,
    col: 22,
    maxcol: 22,
    size: 28,
    matrix: [],
    code: [],
    createGrid: createCodeRows,
    defgridborder: defineStyle,
    createMat: createRandomMatrix,
    updateMat: updateMatrix,
    enRLE: encodeRLE,
    enBIT: encodeBIT,
    encode: enc,
    evalinp: evaluateInput,
    decRLE: decodeRLE,
    decBIT: decodeBIT,
    decode: dec,
    outCodeToForm: outCode,
    addcol: addcolumn,
    mincol: mincolumn,
    clone: makeclone,
    buildFromCode: bfromcode
  };

  grid.element = document.getElementById("code");

  grid.element.innerHTML = grid.createGrid().join('');

  grid.defgridborder();

  grid.element.addEventListener("click", handleronChange, false);

  grid.createMat();

  grid.updateMat();

  grid.encode();

  // Events an Formular binden 
  // Enter
  document.forms[0].onkeypress = function(e) {
    if (!e) {
      e = window.event;
    }
    if (e.keyCode === 13) {
      grid.evalinp(e.target);
      return false;
    }
  };

  // Click Decode
  bt = document.getElementById("btn_decode");

  bt.onclick = function(e) {
    grid.evalinp(document.getElementById("rle_code"));
    return false;
  };

  // Click Encode
  bt2 = document.getElementById("btn_encode");

  bt2.onclick = function(e) {
    grid.outCodeToForm();
    return false;
  };

  // Plus Spalte
  bt3 = document.getElementById("btn_addcol");

  bt3.onclick = function(e) {
    grid.addcol();
    return false;
  };

  // Plus Spalte
  bt4 = document.getElementById("btn_mincol");

  bt4.onclick = function(e) {
    grid.mincol();
    return false;
  };

  // Klonen
  bt4 = document.getElementById("btn_clone");

  bt4.onclick = function(e) {
    grid.clone();
    return false;
  };

  
  // Change Mode
  el = document.getElementById("selectCode");

  el.onchange = function(e) {
    grid.outCodeToForm();
    return false;
  };

}).call(this);
