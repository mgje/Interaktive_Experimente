// Generated by CoffeeScript 1.6.2
(function() {
  var appendNode, bt, buildTree, cBits, clearAllChilds, dASCII, dASCIIBitString, dHuffman, dHuffmanBitString, dec, eASCII, eHuffman, el, enc, gHTMLbin, huff, sInput, wout;

  wout = function(eid, output) {
    var e, t;

    e = clearAllChilds(eid);
    t = document.createTextNode(output);
    e.appendChild(t);
    return false;
  };

  clearAllChilds = function(id) {
    var e;

    e = document.getElementById(id);
    while (e.hasChildNodes()) {
      e.removeChild(e.lastChild);
    }
    return e;
  };

  appendNode = function(inode, onode, name) {
    var child, entry, i, _i, _len;

    if (typeof inode !== "string") {
      entry = {
        name: name,
        children: []
      };
      onode.push(entry);
      i = 0;
      for (_i = 0, _len = inode.length; _i < _len; _i++) {
        child = inode[_i];
        appendNode(child, entry.children, i.toString());
        i = i + 1;
      }
      return false;
    } else {
      entry = {
        name: name + ":" + inode
      };
      if (typeof onode !== "undefined") {
        onode.push(entry);
      }
      return false;
    }
  };

  buildTree = function() {
    var diagonal, e, h, json, link, node, nodes, tjson, tree, vis, w;

    e = clearAllChilds("chart");
    tjson = [];
    appendNode(this.treeEncoded, tjson, "Huffman Baum     ");
    json = tjson[0];
    w = 780;
    h = 780;
    tree = d3.layout.tree().size([h, w - 360]);
    diagonal = d3.svg.diagonal().projection(function(d) {
      return [d.y, d.x];
    });
    vis = d3.select("#chart").append("svg").attr("width", w).attr("height", h).append("g").attr("transform", "translate(30, 10)");
    nodes = tree.nodes(json);
    link = vis.selectAll("path.link").data(tree.links(nodes)).enter().append("path").attr("class", "link").attr("d", diagonal);
    node = vis.selectAll("g.node").data(nodes).enter().append("g").attr("class", "node").attr("transform", function(d) {
      return "translate (" + d.y + "," + d.x + ")";
    });
    node.append("circle").attr("r", 7.4);
    node.append("text").attr("dx", -4).attr("dy", 5).attr("text-anchor", "start").text(function(d) {
      if (d.name[0] !== "H") {
        return d.name[0];
      }
    });
    return node.append("text").attr("dx", 11).attr("dy", 5).attr("text-anchor", "start").text(function(d) {
      if (d.name[1] === ":") {
        return d.name[2];
      } else {
        return "";
      }
    });
  };

  sInput = function(form) {
    this.txt = form.value;
    this.encode();
    return false;
  };

  dec = function() {
    var el;

    el = document.getElementById("selectCode");
    if (el.value === "ASCII Codierung") {
      this.decodeASCII();
    } else {
      this.decodeHuffman();
    }
    wout("decodeout", this.dectxt);
    return false;
  };

  dHuffman = function() {
    return this.dectxt = this.decodeHuffmanBitString(this.encbin);
  };

  dASCII = function() {
    return this.dectxt = this.decodeASCIIBitString(this.encbin);
  };

  cBits = function() {
    var c, tmp, _i, _len, _ref;

    tmp = 0;
    _ref = this.encbin;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      if (c === "1" || c === "0") {
        tmp += 1;
      }
    }
    return tmp + " Bits";
  };

  enc = function() {
    var e, el, el2;

    el = document.getElementById("selectCode");
    if (el.value === "ASCII Codierung") {
      this.encodeASCII();
      e = clearAllChilds("chart");
      el2 = document.getElementById("encodeout");
      el2.innerHTML = this.encHTMLbin;
    } else {
      this.encodeHuffman();
      el2 = document.getElementById("encodeout");
      el2.innerHTML = this.encHTMLbin;
    }
    wout("Bits", this.countBits());
    $(".Hcode").tooltip();
    return false;
  };

  dHuffmanBitString = function(tbin) {
    var b, c, e, f, g, h, i, _i;

    i = "";
    b = this.huffman.root;
    f = tbin.split("");
    e = f.length;
    for (g = _i = 0; 0 <= e ? _i < e : _i > e; g = 0 <= e ? ++_i : --_i) {
      h = f[g];
      if (h === "0") {
        c = "left";
      } else {
        c = "right";
      }
      b = b[c];
      if (b.isLeaf()) {
        i += b.value;
        b = this.huffman.root;
      }
    }
    return i;
  };

  gHTMLbin = function(tbin) {
    var b, c, cl, e, f, g, h, i, pos, s, _i;

    i = "<div class='Hcode even' rel='tooltip' data-placement='top' title=' " + this.txt[0] + " '>";
    b = this.huffman.root;
    f = tbin.split("");
    e = f.length;
    pos = 0;
    for (g = _i = 0; 0 <= e ? _i < e : _i > e; g = 0 <= e ? ++_i : --_i) {
      h = f[g];
      if (h === "0") {
        c = "left";
      } else {
        c = "right";
      }
      i += h;
      b = b[c];
      if (b.isLeaf()) {
        pos += 1;
        if (pos % 2 === 0) {
          cl = "Hcode even";
        } else {
          cl = "Hcode odd";
        }
        i += "</div><div class='" + cl + "' rel='tooltip' data-placement='top' title=' " + this.txt[pos] + " '>";
        b = this.huffman.root;
      }
    }
    s = "<div class='" + cl + "' rel='tooltip' data-placement='top' title=' " + this.txt[pos] + " '>";
    i = i.substring(0, i.length - s.length);
    i += "</div>";
    return i;
  };

  dASCIIBitString = function(tbin) {
    var c, code, k, s, z, _i, _len;

    code = tbin.match(/.{1,8}/g);
    s = "";
    for (_i = 0, _len = code.length; _i < _len; _i++) {
      c = code[_i];
      k = parseInt(c, 2);
      z = String.fromCharCode(k);
      s += z;
    }
    return s;
  };

  eHuffman = function() {
    this.huffman = Huffman.treeFromText(this.txt);
    this.enctxt = this.huffman.encode(this.txt);
    this.encbin = this.huffman.stringToBitString(this.enctxt);
    this.encHTMLbin = this.genEncHTMLbin(this.encbin);
    this.treeEncoded = this.huffman.encodeTree();
    this.genTree();
    return false;
  };

  eASCII = function() {
    var c, cl, encArray, i, j, n, s, ts, z, _i, _j, _k, _len, _len1, _ref;

    this.enctxt = this.txt;
    encArray = [];
    _ref = this.enctxt;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      encArray.push(c.charCodeAt());
    }
    this.encbin = "";
    this.encHTMLbin = "<div id='huffmanCode' ><div class='Hcode even' rel='tooltip' data-placement='top' title=' " + this.txt[0] + "  '>";
    j = 1;
    for (_j = 0, _len1 = encArray.length; _j < _len1; _j++) {
      z = encArray[_j];
      s = z.toString(2);
      n = 8 - s.length;
      if (n > 0) {
        for (i = _k = 0; 0 <= n ? _k < n : _k > n; i = 0 <= n ? ++_k : --_k) {
          this.encbin += "0";
          this.encHTMLbin += "0";
        }
      }
      if (j % 2 === 0) {
        cl = "Hcode even";
      } else {
        cl = "Hcode odd";
      }
      this.encbin += s;
      this.encHTMLbin += s;
      this.encHTMLbin += "</div><div class='" + cl + "' rel='tooltip' data-placement='top' title=' " + this.txt[j] + " '>";
      j += 1;
    }
    ts = "<div class='" + cl + "' rel='tooltip' data-placement='top' title=' " + this.txt[j] + " '>";
    this.encHTMLbin = this.encHTMLbin.substring(0, this.encHTMLbin.length - ts.length);
    this.encHTMLbin += "</div></div>";
    return false;
  };

  huff = {
    txt: "",
    dectxt: "",
    enctxt: "",
    encbin: "",
    encHTMLbin: "",
    huffman: "",
    treeEncoded: "",
    setInput: sInput,
    encodeASCII: eASCII,
    encodeHuffman: eHuffman,
    encode: enc,
    countBits: cBits,
    decode: dec,
    decodeASCII: dASCII,
    decodeHuffman: dHuffman,
    decodeHuffmanBitString: dHuffmanBitString,
    genEncHTMLbin: gHTMLbin,
    decodeASCIIBitString: dASCIIBitString,
    writeOut: wout,
    genTree: buildTree
  };

  document.forms[0].onkeypress = function(e) {
    if (!e) {
      e = window.event;
    }
    if (e.keyCode === 13) {
      huff.setInput(e.target);
      return false;
    }
  };

  bt = document.forms[0].button;

  bt.onclick = function(e) {
    huff.setInput(e.target.form[0]);
    return false;
  };

  bt = document.forms[1].button;

  bt.onclick = function(e) {
    huff.decode();
    return false;
  };

  el = document.getElementById("selectCode");

  el.onchange = function(e) {
    if (huff.enctxt !== "") {
      huff.encode();
    }
    return false;
  };

}).call(this);
