// Generated by CoffeeScript 1.7.1
(function() {
  var bt, cHTMLK, cKeyT, cRowD, cRowP, cRowS, capl, chist, chkerr, chkuni, clearAllChilds, decrpt, e, eform, exp, gKey, gProz, getBackground, getProzZ, hde, iKAbs, iKProz, iKVal, lowCas, mField, rotk, rotm, rotp, schr, upKForm, whisto;

  clearAllChilds = function(id) {
    var e;
    e = document.getElementById(id);
    while (e.hasChildNodes()) {
      e.removeChild(e.lastChild);
    }
    return e;
  };

  upKForm = function() {
    var e, key, keys, _i, _len;
    keys = Object.keys(this.keyTable);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      e = document.getElementById(key);
      e.setAttribute("value", this.keyTable[key]);
    }
    return false;
  };

  iKVal = function() {
    var key, keys, _i, _len, _results;
    keys = Object.keys(this.keyTable);
    _results = [];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      _results.push(this.keyTable[key] = key);
    }
    return _results;
  };

  iKProz = function() {
    var key, keys, _i, _len, _results;
    keys = Object.keys(this.keyTable);
    _results = [];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      _results.push(this.keyProz[key] = 0.0);
    }
    return _results;
  };

  iKAbs = function() {
    var key, keys, _i, _len, _results;
    keys = Object.keys(this.keyTable);
    _results = [];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      _results.push(this.keyAbs[key] = 0.0);
    }
    return _results;
  };

  rotp = function() {
    var key, keys, lastkey, tmp2, tmpValue, _i, _len;
    keys = Object.keys(this.keyTable);
    lastkey = keys[keys.length - 1];
    tmpValue = this.keyTable[lastkey];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      tmp2 = tmpValue;
      tmpValue = this.keyTable[key];
      this.keyTable[key] = tmp2;
    }
    return false;
  };

  rotm = function() {
    var key, keys, lastkey, tmp2, tmpValue, _i, _len;
    keys = Object.keys(this.keyTable);
    keys.reverse();
    lastkey = keys[keys.length - 1];
    tmpValue = this.keyTable[lastkey];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      tmp2 = tmpValue;
      tmpValue = this.keyTable[key];
      this.keyTable[key] = tmp2;
    }
    return false;
  };

  rotk = function(N) {
    var k, _i, _results;
    _results = [];
    for (k = _i = 0; 0 <= N ? _i < N : _i > N; k = 0 <= N ? ++_i : --_i) {
      _results.push(this.rotminus1());
    }
    return _results;
  };

  cKeyT = function() {
    var el;
    el = document.getElementById("keytable");
    return el.innerHTML = this.createHtmlKeys().join("");
  };

  cHTMLK = function() {
    var Nkeys, i, keyrows, keys, _i, _results;
    keys = Object.keys(this.keyTable);
    Nkeys = keys.length;
    keyrows = Math.floor(Nkeys / this.keycolumn) + 1;
    if (Nkeys % this.keycolumn === 0) {
      keyrows -= 1;
    }
    _results = [];
    for (i = _i = 0; 0 <= keyrows ? _i < keyrows : _i > keyrows; i = 0 <= keyrows ? ++_i : --_i) {
      _results.push("<table class=\"table\">\n            <tr>\n               " + (this.createRowSrc(i).join("")) + "\n            </tr>\n            <tr>\n               " + (this.createRowProz(i).join("")) + "\n            </tr>\n            <tr>\n               " + (this.createRowDest(i).join("")) + "\n            </tr>\n        </table>");
    }
    return _results;
  };

  getBackground = function(i) {
    if (i % 2 === 0) {
      return "success";
    } else {
      return "warning";
    }
  };

  getProzZ = function(n, l) {
    if (n < l) {
      return "%";
    } else {
      return "";
    }
  };

  gKey = function(i) {
    var keys, _ref;
    keys = Object.keys(this.keyTable);
    return (_ref = keys[i]) != null ? _ref : "";
  };

  gProz = function(i) {
    var keys, num;
    keys = Object.keys(this.keyTable);
    num = parseFloat(this.keyProz[keys[i]]);
    if (isNaN(num)) {
      return "";
    } else {
      return num.toFixed(1);
    }
  };

  hde = function(i) {
    var keys;
    keys = Object.keys(this.keyTable);
    if (i < keys.length) {
      return "";
    } else {
      return "disabled";
    }
  };

  cRowS = function(i) {
    var k, keys, _i, _ref, _results;
    keys = Object.keys(this.keyTable);
    _results = [];
    for (k = _i = 0, _ref = this.keycolumn; 0 <= _ref ? _i < _ref : _i > _ref; k = 0 <= _ref ? ++_i : --_i) {
      _results.push("<td class=\"" + (getBackground(k)) + " text-center\">" + (this.getKey(k + i * this.keycolumn).toLocaleLowerCase()) + "</td>");
    }
    return _results;
  };

  cRowP = function(i) {
    var k, keys, _i, _ref, _results;
    keys = Object.keys(this.keyTable);
    _results = [];
    for (k = _i = 0, _ref = this.keycolumn; 0 <= _ref ? _i < _ref : _i > _ref; k = 0 <= _ref ? ++_i : --_i) {
      _results.push("<td class=\"" + (getBackground(k)) + " text-center tinyfont\"><small\n	id=P-" + (this.getKey(k + i * this.keycolumn)) + " >" + (this.getProz(k + i * this.keycolumn)) + " " + (getProzZ(k + i * this.keycolumn, keys.length)) + "</small></td>");
    }
    return _results;
  };

  cRowD = function(i) {
    var k, keys, _i, _ref, _results;
    keys = Object.keys(this.keyTable);
    _results = [];
    for (k = _i = 0, _ref = this.keycolumn; 0 <= _ref ? _i < _ref : _i > _ref; k = 0 <= _ref ? ++_i : --_i) {
      _results.push("<td class=\"" + (getBackground(k)) + "\">\n            <input type=\"text\" class=\"form-control\" id=\"" + (this.getKey(k + i * this.keycolumn)) + "\" " + (this.hide(k + i * this.keycolumn)) + "/>\n        </td>");
    }
    return _results;
  };

  capl = function() {
    var e;
    e = document.getElementById("inputTxt");
    e.value = e.value.toLocaleUpperCase();
    return false;
  };

  lowCas = function() {
    var e;
    e = document.getElementById("inputTxt");
    e.value = e.value.toLocaleLowerCase();
    return false;
  };

  decrpt = function() {
    var c, e, e2, e3, input, out, t3, v, _i, _len;
    e = document.getElementById("inputTxt");
    input = e.value;
    out = "";
    this.NumEncCharacters = 0;
    for (_i = 0, _len = input.length; _i < _len; _i++) {
      c = input[_i];
      if (c in this.keyTable) {
        v = this.keyTable[c];
        if (v === "" || v === " ") {
          v = "<span class= 'disabled'>" + c + "</span>";
        } else {
          v = "<span class='active'>" + v + "</span>";
        }
        out += v;
        this.NumEncCharacters += 1;
      } else {
        out += "<span class='active'>" + c.toLocaleUpperCase() + "</span>";
      }
    }
    e2 = clearAllChilds("outputTxt");
    e2.innerHTML = out;
    e3 = clearAllChilds("tot_enc_char");
    t3 = document.createTextNode(this.NumEncCharacters);
    e3.appendChild(t3);
    return false;
  };

  mField = function() {
    var c, cN, e, _i, _len, _ref;
    _ref = this.errorArray;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      if (c !== void 0) {
        e = document.getElementById(c);
        cN = e.parentElement.className;
        if (cN !== "has-error") {
          this.keyClass[c] = cN;
          e.parentElement.className = "has-error";
        }
      }
    }
    return false;
  };

  chkerr = function() {
    var c, correct, e, hist, k, keys, v, _i, _j, _len, _len1, _ref, _results;
    keys = Object.keys(this.keyTable);
    hist = {};
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      k = keys[_i];
      v = this.keyTable[k];
      if (v !== "") {
        if (hist[v] === void 0) {
          hist[v] = 1;
        } else {
          hist[v] += 1;
          correct = [];
        }
      }
    }
    _ref = this.errorArray;
    _results = [];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      c = _ref[_j];
      if ((hist[this.keyTable[c]] === void 0 || hist[this.keyTable[c]] < 2) && this.keyClass[c] !== "") {
        e = document.getElementById(c);
        if (e !== null) {
          e.parentElement.className = this.keyClass[c];
        }
        this.keyClass[c] = "";
        this.errorArray.splice(this.errorArray.indexOf(c), 1);
        _results.push(this.checkError());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  chkuni = function(k, v) {
    var key, keys, values;
    keys = Object.keys(this.keyTable);
    values = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _results.push(this.keyTable[key]);
      }
      return _results;
    }).call(this);
    this.keyTable[k] = v;
    this.updateKeyForm();
    if (values.indexOf(v) > -1 && v !== " " && v !== "") {
      this.errorArray.push(keys[values.indexOf(v)]);
      this.errorArray.push(k);
      this.markField();
    }
    this.checkError();
    return false;
  };

  chist = function() {
    var c, count, e, input, keys, _i, _j, _len, _len1;
    this.initKeyAbs();
    e = document.getElementById("inputTxt");
    input = e.value;
    count = 0;
    for (_i = 0, _len = input.length; _i < _len; _i++) {
      c = input[_i];
      if (c in this.keyTable) {
        count += 1;
        this.keyAbs[c] += 1;
      }
    }
    keys = Object.keys(this.keyTable);
    for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
      c = keys[_j];
      this.keyProz[c] = this.keyAbs[c] / count * 100;
    }
    this.writehisto();
    return false;
  };

  whisto = function() {
    var c, e, keys, num, s, t, tx, _i, _len;
    keys = Object.keys(this.keyTable);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      c = keys[_i];
      s = "P-" + c;
      e = clearAllChilds(s);
      if (this.stateSwitch === "relative") {
        num = parseFloat(this.keyProz[c]);
        if (isNaN(num)) {
          tx = "";
        } else {
          tx = "" + num.toFixed(1) + "%";
        }
      } else {
        num = this.keyAbs[c];
        if (isNaN(num)) {
          tx = "";
        } else {
          tx = "" + num;
        }
      }
      t = document.createTextNode(tx);
      e.appendChild(t);
    }
    this.sortcharlist();
    return false;
  };

  schr = function() {
    var c, charproz, e, el, i, keys, num, s, t, tmp, tx, _i, _j, _len;
    el = document.getElementById("crypC0");
    if (el !== null) {
      keys = Object.keys(this.keyTable);
      charproz = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        c = keys[_i];
        tmp = [this.keyProz[c], c];
        charproz.push(tmp);
      }
      charproz.sort(function(a, b) {
        return b[0] - a[0];
      });
      for (i = _j = 0; _j < 10; i = ++_j) {
        tmp = charproz[i];
        s = "crypC" + i;
        e = clearAllChilds(s);
        t = document.createTextNode(tmp[1]);
        e.appendChild(t);
        s = "crypV" + i;
        e = clearAllChilds(s);
        num = parseFloat(tmp[0]);
        if (isNaN(num)) {
          tx = "";
        } else {
          tx = "" + num.toFixed(1) + "%";
        }
        t = document.createTextNode(tx);
        e.appendChild(t);
      }
    }
    return false;
  };

  exp = {
    name: "DeCrypt",
    keycolumn: 10,
    initKeyValues: iKVal,
    initKeyProz: iKProz,
    initKeyAbs: iKAbs,
    updateKeyForm: upKForm,
    rotplus1: rotp,
    rotminus1: rotm,
    rotkey: rotk,
    createKeyTable: cKeyT,
    createHtmlKeys: cHTMLK,
    createRowSrc: cRowS,
    createRowDest: cRowD,
    createRowProz: cRowP,
    checkunique: chkuni,
    checkError: chkerr,
    markField: mField,
    hide: hde,
    getKey: gKey,
    getProz: gProz,
    capitalize: capl,
    lowerCase: lowCas,
    decrypt: decrpt,
    calchisto: chist,
    writehisto: whisto,
    sortcharlist: schr
  };

  exp.keyTable = {
    "a": "",
    "b": "",
    "c": "",
    "d": "",
    "e": "",
    "f": "",
    "g": "",
    "h": "",
    "i": "",
    "j": "",
    "k": "",
    "l": "",
    "m": "",
    "n": "",
    "o": "",
    "p": "",
    "q": "",
    "r": "",
    "s": "",
    "t": "",
    "u": "",
    "v": "",
    "w": "",
    "x": "",
    "y": "",
    "z": ""
  };

  exp.NumEncCharacters = 1;

  exp.stateSwitch = "relative";

  exp.errorArray = [];

  exp.keyClass = {};

  exp.keyProz = {};

  exp.keyAbs = {};

  exp.initKeyProz();

  exp.createKeyTable();

  exp.updateKeyForm();

  exp.lowerCase();

  exp.decrypt();

  exp.calchisto();

  bt = document.getElementById("btn_crypt");

  bt.onclick = function(e) {
    exp.lowerCase();
    exp.decrypt();
    exp.calchisto();
    return false;
  };

  bt = document.getElementById("stat_rel");

  bt.onclick = function(e) {
    var e2, indx;
    e2 = document.getElementById("stat_rel");
    indx = e2.className.indexOf("active");
    if (indx > -1) {

    } else {
      exp.stateSwitch = "relative";
      exp.writehisto();
    }
    return false;
  };

  bt = document.getElementById("stat_abs");

  bt.onclick = function(e) {
    var e2, indx;
    e2 = document.getElementById("stat_abs");
    indx = e2.className.indexOf("active");
    if (indx > -1) {

    } else {
      exp.stateSwitch = "absolute";
      exp.writehisto();
    }
    return false;
  };

  eform = document.getElementById("inputTxt");

  eform.onkeypress = function(e) {
    if (!e) {
      e = window.event;
    }
    if (e.keyCode === 13) {
      exp.lowerCase();
      exp.decrypt();
      exp.calchisto();
      return false;
    }
  };

  e = document.getElementById("keytable");

  e.onkeyup = function(e) {
    var src;
    src = e.srcElement || e.target;
    src.value = src.value.toLocaleUpperCase();
    if (src.value.length > 1) {
      src.value = src.value[0];
    }
    if (src.value === " ") {
      src.value = "";
    }
    exp.checkunique(src.id, src.value);
    return exp.decrypt();
  };

}).call(this);
